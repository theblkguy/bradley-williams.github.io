////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(x, y, z) {
  let output = []
  if (z === undefined){
    // if x less than y
      // create a counting sequence starting at x and ending at y (ascending)
        // push the current value of i into output
      // else x not less than y
        // create a counting sequence starting at x and ending at y (descending)
          //push the current value of i into output
  } else { // else z been inputted
    // if z < 0
      // return output
    // if x greater than y
      // create ascending
  }
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum() {

}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray() { //should produce no side effects
  //return a reversed copy of the input array

}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace() { // should alter input array to a reversed version of it
  // directly mutate the inpute array into a reversed version of itself

}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  // create a variable called rest
  let rest = null;
  // create a for loop that iterates through array backwards
  for(var i = array.length - 1; i >= 0; i--) {
    // reassign rest to an object with a ket of value equal to the current array item and a rest
    // equal to the current key of rest
    rest = {value: array[i], rest: rest};
  }
}
////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(obj, output=[]) {
  // base
  if (obj.rest === null) {
    output.push(obj.value);
    return output
  }
  //recursion
  output.push(obj.value);
  return listToArray(obj.rest, output);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y){
  //determine if both x and y are NOT objects
  if(typeof x !== 'object' && typeof y !== 'object'){
    return x === y;
  }
  // determine if either x or y is not an object
  if(typeof x !== 'object' || typeof y !== 'object'){
    return false;
  }
  let xKeys = Object.keys(x);
  let yKeys = Object.keys(y);

  if(xKeys.length !== yKeys.length){
    return false
  }
  for(let i = 0; i < xKeys.length; i++) {
    if (!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])){
      return false
    }
  }
  return true
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
